package GUI;

import Database.DBMethods;
import Database.Database;
import java.awt.Color;
import static java.awt.Color.*;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.UnsupportedLookAndFeelException;
import main.Customer;

import com.formdev.flatlaf.*;
import java.awt.Font;
import java.sql.ResultSet;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JButton;
import javax.swing.JLabel;
import kdesp73.databridge.connections.DatabaseConnection;
import kdesp73.databridge.helpers.QueryBuilder;
import kdesp73.themeLib.Theme;
import kdesp73.themeLib.ThemeCollection;

/**
 *
 * @author tgeorg
 */
public class ForgotPasswordFrame extends javax.swing.JFrame {

    MainFrame mf;
    ArrayList<Customer> customerList;
    ResourceBundle rb;
    Theme theme = null;

    private int indexOfCustomer = 0;

    Font itemFont = new Font("Liberation Sans", 0, 16);
    Color pc = new Color(162, 119, 255);
    Color bg = new Color(21, 20, 27);
    Color def = new Color(187, 187, 187);
    Color itemColor = new Color(227, 36, 43);

    /**
     * Creates new form ForgotPw
     */
    public ForgotPasswordFrame() {
        FlatDarculaLaf.setup();
        //Frame setup
        initComponents();
        this.theme = GUIFunctions.setupFrame(this, "Change your password");

        // Center frame
        this.pack();
        this.setLocationRelativeTo(null);

        // Color, focus and visibility setup of components
        jPanel1.setBackground(bg);
        newPasswordField.setForeground(green);
        confirmNewPasswordField.setForeground(red);
        cancelBtn.setForeground(pc);
        applyBtn.setForeground(pc);

        usernameField.setFocusable(false);
        cancelBtn.setFocusable(false);
        applyBtn.setFocusable(false);
        this.setResizable(false);

        newPasswordField.setEnabled(false);
        confirmNewPasswordField.setEnabled(false);
    }

    public ForgotPasswordFrame(MainFrame mf, ArrayList<Customer> customerList) {
        FlatDarculaLaf.setup();
        //Frame setup
        initComponents();
        this.theme = GUIFunctions.setupFrame(this, "Change your password");

        configureFrameProperties();

        // Color, focus and visibility setup of components
        newPasswordField.setForeground(green);
        confirmNewPasswordField.setForeground(red);

        cancelBtn.setFocusable(false);
        applyBtn.setFocusable(false);
        this.setResizable(false);

        newPasswordField.setEnabled(false);
        confirmNewPasswordField.setEnabled(false);

        this.mf = mf;
        this.customerList = customerList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        usernameIndicator = new javax.swing.JLabel();
        usernameField = new javax.swing.JTextField();
        newPasswordIndicator = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JPasswordField();
        confirmNewPasswordIndicator = new javax.swing.JLabel();
        confirmNewPasswordField = new javax.swing.JPasswordField();
        cancelBtn = new javax.swing.JButton();
        applyBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setName("bg"); // NOI18N

        usernameIndicator.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        usernameIndicator.setText("<html><p style=\"text-align:center\"><b>Enter your username:</p> </html>");
        usernameIndicator.setName("textbox"); // NOI18N

        usernameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                usernameFieldKeyReleased(evt);
            }
        });

        newPasswordIndicator.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        newPasswordIndicator.setText("<html><p style=\"text-align:center\"><b>Enter your new password:</p> </html>");
        newPasswordIndicator.setName("textbox"); // NOI18N

        newPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newPasswordFieldKeyReleased(evt);
            }
        });

        confirmNewPasswordIndicator.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        confirmNewPasswordIndicator.setText("<html><p style=\"text-align:center\"><b>Confirm your new password:</p> </html>");
        confirmNewPasswordIndicator.setName("textbox"); // NOI18N

        confirmNewPasswordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                confirmNewPasswordFieldKeyReleased(evt);
            }
        });

        cancelBtn.setBackground(java.awt.Color.darkGray);
        cancelBtn.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        cancelBtn.setText("<html><p style=\"text-align:center\"><b>Cancel</p> </html>");
        cancelBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelBtn.setName("btn"); // NOI18N
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        applyBtn.setBackground(java.awt.Color.darkGray);
        applyBtn.setFont(new java.awt.Font("Liberation Sans", 0, 16)); // NOI18N
        applyBtn.setText("<html><p style=\"text-align:center\"><b>Apply</p> </html>");
        applyBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        applyBtn.setName("btn"); // NOI18N
        applyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(newPasswordIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(confirmNewPasswordIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(usernameIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameField, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                            .addComponent(confirmNewPasswordField)
                            .addComponent(newPasswordField))
                        .addGap(0, 121, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newPasswordIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmNewPasswordIndicator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmNewPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(applyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void configureFrameProperties() {
        DatabaseConnection db = Database.connection();

        ResultSet rs = db.executeQuery(new QueryBuilder().select("Language").from("Settings").build());
        try {
            rs.next();
            String languageName = rs.getString(1);
            if (languageName.equals("English")) {
                GUIFunctions.setTexts(this, Locale.US);
            } else if (languageName.equals("Greek")) {
                GUIFunctions.setTexts(this, Locale.of("el", "GR"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(SettingsFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        db.close();
    }

    private void usernameFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_usernameFieldKeyReleased
        DatabaseConnection db = Database.connection();
        JPopupMenu errorMessage = new JPopupMenu();

        ResultSet rs = db.executeQuery(new QueryBuilder().select("Language").from("Settings").build());
        try {
            rs.next();
            String languageName = rs.getString(1);
            if (languageName.equals("English")) {
                JMenuItem notExistUn = new JMenuItem("This username does not exist");
                notExistUn.setForeground(itemColor);
                notExistUn.setFont(itemFont);
                errorMessage.add(notExistUn);

                for (int i = 0; i < customerList.size(); i++) {
                    if (usernameField.getText().equals(customerList.get(i).getAcc().getUsername())) {
                        indexOfCustomer = i;
                        newPasswordField.setEnabled(true);
                        errorMessage.remove(notExistUn);
                        errorMessage.show(this, 100, 200);
                        return;
                    }
                }

                if (usernameField.getText().isEmpty() || usernameField.getText().isBlank()) {
                    newPasswordField.setEnabled(false);
                    errorMessage.remove(notExistUn);
                    errorMessage.show(this, 100, 200);
                    usernameField.requestFocus();
                } else {
                    newPasswordField.setEnabled(false);
                    errorMessage.show(this, 100, 200);
                    usernameField.requestFocus();
                }
            } else if (languageName.equals("Greek")) {
                JMenuItem notExistUn = new JMenuItem("Αυτό το όνομα χρήστη δεν υπάρχει");
                notExistUn.setForeground(itemColor);
                notExistUn.setFont(itemFont);
                errorMessage.add(notExistUn);

                for (int i = 0; i < customerList.size(); i++) {
                    if (usernameField.getText().equals(customerList.get(i).getAcc().getUsername())) {
                        indexOfCustomer = i;
                        newPasswordField.setEnabled(true);
                        errorMessage.remove(notExistUn);
                        errorMessage.show(this, 100, 200);
                        return;
                    }
                }

                if (usernameField.getText().isEmpty() || usernameField.getText().isBlank()) {
                    newPasswordField.setEnabled(false);
                    errorMessage.remove(notExistUn);
                    errorMessage.show(this, 100, 200);
                    usernameField.requestFocus();
                } else {
                    newPasswordField.setEnabled(false);
                    errorMessage.show(this, 100, 200);
                    usernameField.requestFocus();
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChangePasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        db.close();
    }//GEN-LAST:event_usernameFieldKeyReleased

    private void newPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newPasswordFieldKeyReleased
        DatabaseConnection db = Database.connection();
        JPopupMenu errorMessage = new JPopupMenu();
        errorMessage.setFocusable(false);

        try {
            ResultSet rs = db.executeQuery(new QueryBuilder().select("Language").from("Settings").build());
            rs.next();
            String languageName = rs.getString(1);
            if (languageName.equals("English")) {
                JMenuItem samePw = new JMenuItem("Your new password must not match with your old one");
                JMenuItem emptyBlankPw = new JMenuItem("Your new password must not be empty or blank");
                JMenuItem sizePw = new JMenuItem("Your new password must be at least 5 at size");
                JMenuItem numPw = new JMenuItem("Your new password must contain at least one number");
                JMenuItem charPw = new JMenuItem("Your new password must contain at least one character");

                samePw.setForeground(itemColor);
                samePw.setFont(itemFont);
                emptyBlankPw.setForeground(itemColor);
                emptyBlankPw.setFont(itemFont);
                sizePw.setForeground(itemColor);
                sizePw.setFont(itemFont);
                numPw.setForeground(itemColor);
                numPw.setFont(itemFont);
                charPw.setForeground(itemColor);
                charPw.setFont(itemFont);

                errorMessage.add(samePw);
                errorMessage.add(emptyBlankPw);
                errorMessage.add(sizePw);
                errorMessage.add(numPw);
                errorMessage.add(charPw);

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).isBlank() || GUIUtils.charArrayToString(newPasswordField.getPassword()).isEmpty()) {
                    errorMessage.remove(samePw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (GUIUtils.checkIfAllNums(GUIUtils.charArrayToString(newPasswordField.getPassword()))) {
                    if (newPasswordField.getPassword().length < 5) {
                        errorMessage.remove(samePw);
                        errorMessage.remove(emptyBlankPw);
                        errorMessage.remove(numPw);
                        errorMessage.show(this, 50, 220);
                        newPasswordField.requestFocus();
                        newPasswordField.setForeground(red);
                        return;
                    }
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (!GUIUtils.checkNums(GUIUtils.charArrayToString(newPasswordField.getPassword()))) {
                    if (newPasswordField.getPassword().length < 5) {
                        errorMessage.remove(samePw);
                        errorMessage.remove(emptyBlankPw);
                        errorMessage.remove(charPw);
                        errorMessage.show(this, 70, 220);
                        newPasswordField.requestFocus();
                        newPasswordField.setForeground(red);
                        return;
                    }
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (newPasswordField.getPassword().length < 5) {
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).equals(customerList.get(indexOfCustomer).getAcc().getPassword())) {
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                newPasswordField.setForeground(green);
                confirmNewPasswordField.setEnabled(true);

                errorMessage.remove(samePw);
                errorMessage.remove(emptyBlankPw);
                errorMessage.remove(sizePw);
                errorMessage.remove(numPw);
                errorMessage.remove(charPw);
                errorMessage.show(this, 70, 220);
                newPasswordField.requestFocus();
            } else if (languageName.equals("Greek")) {
                JMenuItem samePw = new JMenuItem("Ο κωδικός σας δεν πρέπει να ταιριάζει με τον παλιό σου");
                JMenuItem emptyBlankPw = new JMenuItem("Ο νέος σας κωδικός δεν πρέπει να είναι άδειος");
                JMenuItem sizePw = new JMenuItem("Ο νεός σας κωδικός πρέπει να είναι τουλάχιστον μεγέθους 5");
                JMenuItem numPw = new JMenuItem("Ο νέος σας κωδικός πρέπει να περιέχει τουλαχιστόν έναν αριθμό");
                JMenuItem charPw = new JMenuItem("Ο νέος σας κωδικός πρέπει να περιέχει τουλάχιστον έναν χαρακτήρα");

                samePw.setForeground(itemColor);
                samePw.setFont(itemFont);
                emptyBlankPw.setForeground(itemColor);
                emptyBlankPw.setFont(itemFont);
                sizePw.setForeground(itemColor);
                sizePw.setFont(itemFont);
                numPw.setForeground(itemColor);
                numPw.setFont(itemFont);
                charPw.setForeground(itemColor);
                charPw.setFont(itemFont);

                errorMessage.add(samePw);
                errorMessage.add(emptyBlankPw);
                errorMessage.add(sizePw);
                errorMessage.add(numPw);
                errorMessage.add(charPw);

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).isBlank() || GUIUtils.charArrayToString(newPasswordField.getPassword()).isEmpty()) {
                    errorMessage.remove(samePw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (GUIUtils.checkIfAllNums(GUIUtils.charArrayToString(newPasswordField.getPassword()))) {
                    if (newPasswordField.getPassword().length < 5) {
                        errorMessage.remove(samePw);
                        errorMessage.remove(emptyBlankPw);
                        errorMessage.remove(numPw);
                        errorMessage.show(this, 50, 220);
                        newPasswordField.requestFocus();
                        newPasswordField.setForeground(red);
                        return;
                    }
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (!GUIUtils.checkNums(GUIUtils.charArrayToString(newPasswordField.getPassword()))) {
                    if (newPasswordField.getPassword().length < 5) {
                        errorMessage.remove(samePw);
                        errorMessage.remove(emptyBlankPw);
                        errorMessage.remove(charPw);
                        errorMessage.show(this, 50, 220);
                        newPasswordField.requestFocus();
                        newPasswordField.setForeground(red);
                        return;
                    }
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (newPasswordField.getPassword().length < 5) {
                    errorMessage.remove(samePw);
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).equals(customerList.get(indexOfCustomer).getAcc().getPassword())) {
                    errorMessage.remove(emptyBlankPw);
                    errorMessage.remove(sizePw);
                    errorMessage.remove(numPw);
                    errorMessage.remove(charPw);
                    errorMessage.show(this, 50, 220);
                    newPasswordField.requestFocus();
                    newPasswordField.setForeground(red);
                    return;
                }

                newPasswordField.setForeground(green);
                confirmNewPasswordField.setEnabled(true);

                errorMessage.remove(samePw);
                errorMessage.remove(emptyBlankPw);
                errorMessage.remove(sizePw);
                errorMessage.remove(numPw);
                errorMessage.remove(charPw);
                errorMessage.show(this, 50, 220);
                newPasswordField.requestFocus();
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChangePasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        db.close();
    }//GEN-LAST:event_newPasswordFieldKeyReleased

    private void confirmNewPasswordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_confirmNewPasswordFieldKeyReleased
        DatabaseConnection db = Database.connection();

        JPopupMenu errorMessage = new JPopupMenu();
        try {
            ResultSet rs = db.executeQuery(new QueryBuilder().select("Language").from("Settings").build());
            rs.next();
            String languageName = rs.getString(1);
            if (languageName.equals("English")) {
                JMenuItem samePw = new JMenuItem("This password does not match with your new one");
                samePw.setForeground(red);
                samePw.setFont(itemFont);
                errorMessage.add(samePw);

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).equals(GUIUtils.charArrayToString(confirmNewPasswordField.getPassword()))) {
                    errorMessage.remove(samePw);
                    confirmNewPasswordField.setForeground(green);
                } else {
                    confirmNewPasswordField.setForeground(red);
                }

                errorMessage.show(this, 70, 220);
            } else if (languageName.equals("Greek")) {
                JMenuItem samePw = new JMenuItem("Αυτός ο κωδικός δεν ταιριάζει με τον καινούργιο");
                samePw.setForeground(red);
                samePw.setFont(itemFont);
                errorMessage.add(samePw);

                if (GUIUtils.charArrayToString(newPasswordField.getPassword()).equals(GUIUtils.charArrayToString(confirmNewPasswordField.getPassword()))) {
                    errorMessage.remove(samePw);
                    confirmNewPasswordField.setForeground(green);
                } else {
                    confirmNewPasswordField.setForeground(red);
                }

                errorMessage.show(this, 70, 220);
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChangePasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        db.close();
    }//GEN-LAST:event_confirmNewPasswordFieldKeyReleased

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void applyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyBtnActionPerformed
        DatabaseConnection db = Database.connection();

        ResultSet rs = db.executeQuery(new QueryBuilder().select("Language").from("Settings").build());
        try {
            rs.next();
            String languageName = rs.getString(1);
            if (languageName.equals("English")) {
                if (newPasswordField.getForeground() == green && newPasswordField.getForeground() == green && confirmNewPasswordField.getForeground() == green) {
                    customerList.get(indexOfCustomer).getAcc().setPassword(GUIUtils.charArrayToString(newPasswordField.getPassword()));

                    try {
                        DBMethods.updateCustomerAcc(customerList, indexOfCustomer);
                    } catch (SQLException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.dispose();
                    JOptionPane.showMessageDialog(mf, "Successfull change of your password");
                } else {
                    JOptionPane.showMessageDialog(this, "Unsuccessfull change of your password", "Change Failed", JOptionPane.ERROR_MESSAGE);
                }
            } else if (languageName.equals("Greek")) {
                if (newPasswordField.getForeground() == green && newPasswordField.getForeground() == green && confirmNewPasswordField.getForeground() == green) {
                    customerList.get(indexOfCustomer).getAcc().setPassword(GUIUtils.charArrayToString(newPasswordField.getPassword()));

                    try {
                        DBMethods.updateCustomerAcc(customerList, indexOfCustomer);
                    } catch (SQLException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    this.dispose();
                    JOptionPane.showMessageDialog(mf, "Επιτυχής αλλαγή κωδικού");
                } else {
                    JOptionPane.showMessageDialog(this, "Ανεπιτυχής αλλαγή κωδικού", "Η αλλαγή απέτυχε", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(ChangePasswordFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        db.close();
    }//GEN-LAST:event_applyBtnActionPerformed

    /**
     * @param args the command line arguments
     * @throws java.lang.ClassNotFoundException
     * @throws java.lang.InstantiationException
     * @throws java.lang.IllegalAccessException
     * @throws javax.swing.UnsupportedLookAndFeelException
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException, IllegalAccessException, UnsupportedLookAndFeelException {
        /* Set the Nimbus look and feel */

 /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ForgotPasswordFrame().setVisible(true);
            }
        });
    }

    public Theme getTheme() {
        return theme;
    }

    public void setTheme(Theme theme) {
        this.theme = theme;
        ThemeCollection.applyTheme(this, theme);
    }

    public JButton getApplyBtn() {
        return applyBtn;
    }

    public JButton getCancelBtn() {
        return cancelBtn;
    }

    public JLabel getConfirmNewPasswordIndicator() {
        return confirmNewPasswordIndicator;
    }

    public JLabel getNewPasswordIndicator() {
        return newPasswordIndicator;
    }

    public JLabel getUsernameIndicator() {
        return usernameIndicator;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JPasswordField confirmNewPasswordField;
    private javax.swing.JLabel confirmNewPasswordIndicator;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JLabel newPasswordIndicator;
    private javax.swing.JTextField usernameField;
    private javax.swing.JLabel usernameIndicator;
    // End of variables declaration//GEN-END:variables
}
